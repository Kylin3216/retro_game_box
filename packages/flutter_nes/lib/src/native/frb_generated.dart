// This file is automatically generated, so please do not edit it.
// Generated by `flutter_rust_bridge`@ 2.0.0-dev.26.

// ignore_for_file: unused_import, unused_element, unnecessary_import, duplicate_ignore, invalid_use_of_internal_member, annotate_overrides, non_constant_identifier_names, curly_braces_in_flow_control_structures, prefer_const_literals_to_create_immutables, unused_field

import 'api/mirrors.dart';
import 'api/nes.dart';
import 'api/texture.dart';
import 'dart:async';
import 'dart:convert';
import 'frb_generated.io.dart' if (dart.library.html) 'frb_generated.web.dart';
import 'package:flutter_rust_bridge/flutter_rust_bridge_for_generated.dart';

/// Main entrypoint of the Rust API
class RustLib extends BaseEntrypoint<RustLibApi, RustLibApiImpl, RustLibWire> {
  @internal
  static final instance = RustLib._();

  RustLib._();

  /// Initialize flutter_rust_bridge
  static Future<void> init({
    RustLibApi? api,
    BaseHandler? handler,
    ExternalLibrary? externalLibrary,
  }) async {
    await instance.initImpl(
      api: api,
      handler: handler,
      externalLibrary: externalLibrary,
    );
  }

  /// Dispose flutter_rust_bridge
  ///
  /// The call to this function is optional, since flutter_rust_bridge (and everything else)
  /// is automatically disposed when the app stops.
  static void dispose() => instance.disposeImpl();

  @override
  ApiImplConstructor<RustLibApiImpl, RustLibWire> get apiImplConstructor =>
      RustLibApiImpl.new;

  @override
  WireConstructor<RustLibWire> get wireConstructor =>
      RustLibWire.fromExternalLibrary;

  @override
  Future<void> executeRustInitializers() async {}

  @override
  ExternalLibraryLoaderConfig get defaultExternalLibraryLoaderConfig =>
      kDefaultExternalLibraryLoaderConfig;

  @override
  String get codegenVersion => '2.0.0-dev.26';

  static const kDefaultExternalLibraryLoaderConfig =
      ExternalLibraryLoaderConfig(
    stem: 'flutter_nes',
    ioDirectory: 'target/release/',
    webPrefix: 'pkg/',
  );
}

abstract class RustLibApi extends BaseApi {
  NesConfig nesConfigCreate(
      {required VideoFilter filter,
      required NesRegion region,
      required RamState ramState,
      required FourPlayer fourPlayer,
      required bool zapper,
      required List<String> genieCodes,
      dynamic hint});

  NesEmulator nesEmulatorCreate({dynamic hint});

  Future<void> nesEmulatorHandleButton(
      {required NesEmulator that,
      required Player player,
      required NesButton button,
      required bool pressed,
      dynamic hint});

  Future<void> nesEmulatorLoadRom(
      {required NesEmulator that,
      required String name,
      required List<int> data,
      dynamic hint});

  Future<void> nesEmulatorRunLoopForCallback(
      {required NesEmulator that,
      required FutureOr<void> Function(Uint8List) callback,
      dynamic hint});

  Stream<Uint8List> nesEmulatorRunLoopForPainter(
      {required NesEmulator that, dynamic hint});

  Future<void> nesEmulatorRunLoopForTexture(
      {required NesEmulator that, required NesTexture texture, dynamic hint});

  void nesEmulatorStopLoop({required NesEmulator that, dynamic hint});

  NesEmulator nesEmulatorWithConfig({required NesConfig config, dynamic hint});

  Future<NesTexture?> nesTextureCreate({required int handle, dynamic hint});

  int nesTextureId({required NesTexture that, dynamic hint});

  Future<void> nesTextureRender(
      {required NesTexture that, required List<int> data, dynamic hint});

  RustArcIncrementStrongCountFnType
      get rust_arc_increment_strong_count_NesEmulator;

  RustArcDecrementStrongCountFnType
      get rust_arc_decrement_strong_count_NesEmulator;

  CrossPlatformFinalizerArg get rust_arc_decrement_strong_count_NesEmulatorPtr;

  RustArcIncrementStrongCountFnType
      get rust_arc_increment_strong_count_NesTexture;

  RustArcDecrementStrongCountFnType
      get rust_arc_decrement_strong_count_NesTexture;

  CrossPlatformFinalizerArg get rust_arc_decrement_strong_count_NesTexturePtr;
}

class RustLibApiImpl extends RustLibApiImplPlatform implements RustLibApi {
  RustLibApiImpl({
    required super.handler,
    required super.wire,
    required super.generalizedFrbRustBinding,
    required super.portManager,
  });

  @override
  NesConfig nesConfigCreate(
      {required VideoFilter filter,
      required NesRegion region,
      required RamState ramState,
      required FourPlayer fourPlayer,
      required bool zapper,
      required List<String> genieCodes,
      dynamic hint}) {
    return handler.executeSync(SyncTask(
      callFfi: () {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_video_filter(filter, serializer);
        sse_encode_nes_region(region, serializer);
        sse_encode_ram_state(ramState, serializer);
        sse_encode_four_player(fourPlayer, serializer);
        sse_encode_bool(zapper, serializer);
        sse_encode_list_String(genieCodes, serializer);
        return pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 1)!;
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_nes_config,
        decodeErrorData: null,
      ),
      constMeta: kNesConfigCreateConstMeta,
      argValues: [filter, region, ramState, fourPlayer, zapper, genieCodes],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta get kNesConfigCreateConstMeta => const TaskConstMeta(
        debugName: "NesConfig_create",
        argNames: [
          "filter",
          "region",
          "ramState",
          "fourPlayer",
          "zapper",
          "genieCodes"
        ],
      );

  @override
  NesEmulator nesEmulatorCreate({dynamic hint}) {
    return handler.executeSync(SyncTask(
      callFfi: () {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        return pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 2)!;
      },
      codec: SseCodec(
        decodeSuccessData:
            sse_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedrust_asyncRwLockNesEmulator,
        decodeErrorData: null,
      ),
      constMeta: kNesEmulatorCreateConstMeta,
      argValues: [],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta get kNesEmulatorCreateConstMeta => const TaskConstMeta(
        debugName: "NesEmulator_create",
        argNames: [],
      );

  @override
  Future<void> nesEmulatorHandleButton(
      {required NesEmulator that,
      required Player player,
      required NesButton button,
      required bool pressed,
      dynamic hint}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_Auto_RefMut_RustOpaque_flutter_rust_bridgefor_generatedrust_asyncRwLockNesEmulator(
            that, serializer);
        sse_encode_player(player, serializer);
        sse_encode_nes_button(button, serializer);
        sse_encode_bool(pressed, serializer);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 8, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_unit,
        decodeErrorData: null,
      ),
      constMeta: kNesEmulatorHandleButtonConstMeta,
      argValues: [that, player, button, pressed],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta get kNesEmulatorHandleButtonConstMeta => const TaskConstMeta(
        debugName: "NesEmulator_handle_button",
        argNames: ["that", "player", "button", "pressed"],
      );

  @override
  Future<void> nesEmulatorLoadRom(
      {required NesEmulator that,
      required String name,
      required List<int> data,
      dynamic hint}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_Auto_RefMut_RustOpaque_flutter_rust_bridgefor_generatedrust_asyncRwLockNesEmulator(
            that, serializer);
        sse_encode_String(name, serializer);
        sse_encode_list_prim_u_8_loose(data, serializer);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 4, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_unit,
        decodeErrorData: sse_decode_AnyhowException,
      ),
      constMeta: kNesEmulatorLoadRomConstMeta,
      argValues: [that, name, data],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta get kNesEmulatorLoadRomConstMeta => const TaskConstMeta(
        debugName: "NesEmulator_load_rom",
        argNames: ["that", "name", "data"],
      );

  @override
  Future<void> nesEmulatorRunLoopForCallback(
      {required NesEmulator that,
      required FutureOr<void> Function(Uint8List) callback,
      dynamic hint}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedrust_asyncRwLockNesEmulator(
            that, serializer);
        sse_encode_DartFn_Inputs_list_prim_u_8_strict_Output_unit(
            callback, serializer);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 5, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_unit,
        decodeErrorData: sse_decode_AnyhowException,
      ),
      constMeta: kNesEmulatorRunLoopForCallbackConstMeta,
      argValues: [that, callback],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta get kNesEmulatorRunLoopForCallbackConstMeta =>
      const TaskConstMeta(
        debugName: "NesEmulator_run_loop_for_callback",
        argNames: ["that", "callback"],
      );

  @override
  Stream<Uint8List> nesEmulatorRunLoopForPainter(
      {required NesEmulator that, dynamic hint}) {
    return handler.executeStream(StreamTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedrust_asyncRwLockNesEmulator(
            that, serializer);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 6, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_list_prim_u_8_strict,
        decodeErrorData: sse_decode_AnyhowException,
      ),
      constMeta: kNesEmulatorRunLoopForPainterConstMeta,
      argValues: [that],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta get kNesEmulatorRunLoopForPainterConstMeta =>
      const TaskConstMeta(
        debugName: "NesEmulator_run_loop_for_painter",
        argNames: ["that"],
      );

  @override
  Future<void> nesEmulatorRunLoopForTexture(
      {required NesEmulator that, required NesTexture texture, dynamic hint}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedrust_asyncRwLockNesEmulator(
            that, serializer);
        sse_encode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedrust_asyncRwLockNesTexture(
            texture, serializer);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 7, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_unit,
        decodeErrorData: sse_decode_AnyhowException,
      ),
      constMeta: kNesEmulatorRunLoopForTextureConstMeta,
      argValues: [that, texture],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta get kNesEmulatorRunLoopForTextureConstMeta =>
      const TaskConstMeta(
        debugName: "NesEmulator_run_loop_for_texture",
        argNames: ["that", "texture"],
      );

  @override
  void nesEmulatorStopLoop({required NesEmulator that, dynamic hint}) {
    return handler.executeSync(SyncTask(
      callFfi: () {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedrust_asyncRwLockNesEmulator(
            that, serializer);
        return pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 9)!;
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_unit,
        decodeErrorData: null,
      ),
      constMeta: kNesEmulatorStopLoopConstMeta,
      argValues: [that],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta get kNesEmulatorStopLoopConstMeta => const TaskConstMeta(
        debugName: "NesEmulator_stop_loop",
        argNames: ["that"],
      );

  @override
  NesEmulator nesEmulatorWithConfig({required NesConfig config, dynamic hint}) {
    return handler.executeSync(SyncTask(
      callFfi: () {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_box_autoadd_nes_config(config, serializer);
        return pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 3)!;
      },
      codec: SseCodec(
        decodeSuccessData:
            sse_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedrust_asyncRwLockNesEmulator,
        decodeErrorData: null,
      ),
      constMeta: kNesEmulatorWithConfigConstMeta,
      argValues: [config],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta get kNesEmulatorWithConfigConstMeta => const TaskConstMeta(
        debugName: "NesEmulator_with_config",
        argNames: ["config"],
      );

  @override
  Future<NesTexture?> nesTextureCreate({required int handle, dynamic hint}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_i_64(handle, serializer);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 10, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData:
            sse_decode_opt_box_autoadd_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedrust_asyncRwLockNesTexture,
        decodeErrorData: sse_decode_AnyhowException,
      ),
      constMeta: kNesTextureCreateConstMeta,
      argValues: [handle],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta get kNesTextureCreateConstMeta => const TaskConstMeta(
        debugName: "NesTexture_create",
        argNames: ["handle"],
      );

  @override
  int nesTextureId({required NesTexture that, dynamic hint}) {
    return handler.executeSync(SyncTask(
      callFfi: () {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedrust_asyncRwLockNesTexture(
            that, serializer);
        return pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 12)!;
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_i_64,
        decodeErrorData: null,
      ),
      constMeta: kNesTextureIdConstMeta,
      argValues: [that],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta get kNesTextureIdConstMeta => const TaskConstMeta(
        debugName: "NesTexture_id",
        argNames: ["that"],
      );

  @override
  Future<void> nesTextureRender(
      {required NesTexture that, required List<int> data, dynamic hint}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedrust_asyncRwLockNesTexture(
            that, serializer);
        sse_encode_list_prim_u_8_loose(data, serializer);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 11, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_unit,
        decodeErrorData: sse_decode_AnyhowException,
      ),
      constMeta: kNesTextureRenderConstMeta,
      argValues: [that, data],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta get kNesTextureRenderConstMeta => const TaskConstMeta(
        debugName: "NesTexture_render",
        argNames: ["that", "data"],
      );

  Future<void> Function(int, dynamic)
      encode_DartFn_Inputs_list_prim_u_8_strict_Output_unit(
          FutureOr<void> Function(Uint8List) raw) {
    return (callId, rawArg0) async {
      final arg0 = dco_decode_list_prim_u_8_strict(rawArg0);

      final rawOutput = await raw(arg0);

      final serializer = SseSerializer(generalizedFrbRustBinding);
      sse_encode_unit(rawOutput, serializer);
      final output = serializer.intoRaw();

      generalizedFrbRustBinding.dartFnDeliverOutput(
          callId: callId,
          ptr: output.ptr,
          rustVecLen: output.rustVecLen,
          dataLen: output.dataLen);
    };
  }

  RustArcIncrementStrongCountFnType
      get rust_arc_increment_strong_count_NesEmulator => wire
          .rust_arc_increment_strong_count_RustOpaque_flutter_rust_bridgefor_generatedrust_asyncRwLockNesEmulator;

  RustArcDecrementStrongCountFnType
      get rust_arc_decrement_strong_count_NesEmulator => wire
          .rust_arc_decrement_strong_count_RustOpaque_flutter_rust_bridgefor_generatedrust_asyncRwLockNesEmulator;

  RustArcIncrementStrongCountFnType
      get rust_arc_increment_strong_count_NesTexture => wire
          .rust_arc_increment_strong_count_RustOpaque_flutter_rust_bridgefor_generatedrust_asyncRwLockNesTexture;

  RustArcDecrementStrongCountFnType
      get rust_arc_decrement_strong_count_NesTexture => wire
          .rust_arc_decrement_strong_count_RustOpaque_flutter_rust_bridgefor_generatedrust_asyncRwLockNesTexture;

  @protected
  AnyhowException dco_decode_AnyhowException(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return AnyhowException(raw as String);
  }

  @protected
  NesEmulator
      dco_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedrust_asyncRwLockNesEmulator(
          dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return NesEmulator.dcoDecode(raw as List<dynamic>);
  }

  @protected
  NesTexture
      dco_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedrust_asyncRwLockNesTexture(
          dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return NesTexture.dcoDecode(raw as List<dynamic>);
  }

  @protected
  NesEmulator
      dco_decode_Auto_RefMut_RustOpaque_flutter_rust_bridgefor_generatedrust_asyncRwLockNesEmulator(
          dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return NesEmulator.dcoDecode(raw as List<dynamic>);
  }

  @protected
  NesEmulator
      dco_decode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedrust_asyncRwLockNesEmulator(
          dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return NesEmulator.dcoDecode(raw as List<dynamic>);
  }

  @protected
  NesTexture
      dco_decode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedrust_asyncRwLockNesTexture(
          dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return NesTexture.dcoDecode(raw as List<dynamic>);
  }

  @protected
  FutureOr<void> Function(Uint8List)
      dco_decode_DartFn_Inputs_list_prim_u_8_strict_Output_unit(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    throw UnimplementedError('');
  }

  @protected
  Object dco_decode_DartOpaque(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return decodeDartOpaque(raw, generalizedFrbRustBinding);
  }

  @protected
  NesEmulator
      dco_decode_RustOpaque_flutter_rust_bridgefor_generatedrust_asyncRwLockNesEmulator(
          dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return NesEmulator.dcoDecode(raw as List<dynamic>);
  }

  @protected
  NesTexture
      dco_decode_RustOpaque_flutter_rust_bridgefor_generatedrust_asyncRwLockNesTexture(
          dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return NesTexture.dcoDecode(raw as List<dynamic>);
  }

  @protected
  String dco_decode_String(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return raw as String;
  }

  @protected
  bool dco_decode_bool(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return raw as bool;
  }

  @protected
  NesTexture
      dco_decode_box_autoadd_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedrust_asyncRwLockNesTexture(
          dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return raw as NesTexture;
  }

  @protected
  NesConfig dco_decode_box_autoadd_nes_config(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return dco_decode_nes_config(raw);
  }

  @protected
  FourPlayer dco_decode_four_player(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return FourPlayer.values[raw as int];
  }

  @protected
  int dco_decode_i_32(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return raw as int;
  }

  @protected
  int dco_decode_i_64(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return dcoDecodeI64OrU64(raw);
  }

  @protected
  List<String> dco_decode_list_String(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return (raw as List<dynamic>).map(dco_decode_String).toList();
  }

  @protected
  List<int> dco_decode_list_prim_u_8_loose(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return raw as List<int>;
  }

  @protected
  Uint8List dco_decode_list_prim_u_8_strict(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return raw as Uint8List;
  }

  @protected
  NesButton dco_decode_nes_button(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return NesButton.values[raw as int];
  }

  @protected
  NesConfig dco_decode_nes_config(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    final arr = raw as List<dynamic>;
    if (arr.length != 6)
      throw Exception('unexpected arr length: expect 6 but see ${arr.length}');
    return NesConfig(
      filter: dco_decode_video_filter(arr[0]),
      region: dco_decode_nes_region(arr[1]),
      ramState: dco_decode_ram_state(arr[2]),
      fourPlayer: dco_decode_four_player(arr[3]),
      zapper: dco_decode_bool(arr[4]),
      genieCodes: dco_decode_list_String(arr[5]),
    );
  }

  @protected
  NesRegion dco_decode_nes_region(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return NesRegion.values[raw as int];
  }

  @protected
  NesTexture?
      dco_decode_opt_box_autoadd_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedrust_asyncRwLockNesTexture(
          dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return raw == null
        ? null
        : dco_decode_box_autoadd_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedrust_asyncRwLockNesTexture(
            raw);
  }

  @protected
  Player dco_decode_player(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return Player.values[raw as int];
  }

  @protected
  RamState dco_decode_ram_state(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return RamState.values[raw as int];
  }

  @protected
  int dco_decode_u_8(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return raw as int;
  }

  @protected
  void dco_decode_unit(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return;
  }

  @protected
  int dco_decode_usize(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return dcoDecodeI64OrU64(raw);
  }

  @protected
  VideoFilter dco_decode_video_filter(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return VideoFilter.values[raw as int];
  }

  @protected
  AnyhowException sse_decode_AnyhowException(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    var inner = sse_decode_String(deserializer);
    return AnyhowException(inner);
  }

  @protected
  NesEmulator
      sse_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedrust_asyncRwLockNesEmulator(
          SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return NesEmulator.sseDecode(
        sse_decode_usize(deserializer), sse_decode_i_32(deserializer));
  }

  @protected
  NesTexture
      sse_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedrust_asyncRwLockNesTexture(
          SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return NesTexture.sseDecode(
        sse_decode_usize(deserializer), sse_decode_i_32(deserializer));
  }

  @protected
  NesEmulator
      sse_decode_Auto_RefMut_RustOpaque_flutter_rust_bridgefor_generatedrust_asyncRwLockNesEmulator(
          SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return NesEmulator.sseDecode(
        sse_decode_usize(deserializer), sse_decode_i_32(deserializer));
  }

  @protected
  NesEmulator
      sse_decode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedrust_asyncRwLockNesEmulator(
          SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return NesEmulator.sseDecode(
        sse_decode_usize(deserializer), sse_decode_i_32(deserializer));
  }

  @protected
  NesTexture
      sse_decode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedrust_asyncRwLockNesTexture(
          SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return NesTexture.sseDecode(
        sse_decode_usize(deserializer), sse_decode_i_32(deserializer));
  }

  @protected
  Object sse_decode_DartOpaque(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    var inner = sse_decode_usize(deserializer);
    return decodeDartOpaque(inner, generalizedFrbRustBinding);
  }

  @protected
  NesEmulator
      sse_decode_RustOpaque_flutter_rust_bridgefor_generatedrust_asyncRwLockNesEmulator(
          SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return NesEmulator.sseDecode(
        sse_decode_usize(deserializer), sse_decode_i_32(deserializer));
  }

  @protected
  NesTexture
      sse_decode_RustOpaque_flutter_rust_bridgefor_generatedrust_asyncRwLockNesTexture(
          SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return NesTexture.sseDecode(
        sse_decode_usize(deserializer), sse_decode_i_32(deserializer));
  }

  @protected
  String sse_decode_String(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    var inner = sse_decode_list_prim_u_8_strict(deserializer);
    return utf8.decoder.convert(inner);
  }

  @protected
  bool sse_decode_bool(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return deserializer.buffer.getUint8() != 0;
  }

  @protected
  NesTexture
      sse_decode_box_autoadd_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedrust_asyncRwLockNesTexture(
          SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return (sse_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedrust_asyncRwLockNesTexture(
        deserializer));
  }

  @protected
  NesConfig sse_decode_box_autoadd_nes_config(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return (sse_decode_nes_config(deserializer));
  }

  @protected
  FourPlayer sse_decode_four_player(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    var inner = sse_decode_i_32(deserializer);
    return FourPlayer.values[inner];
  }

  @protected
  int sse_decode_i_32(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return deserializer.buffer.getInt32();
  }

  @protected
  int sse_decode_i_64(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return deserializer.buffer.getInt64();
  }

  @protected
  List<String> sse_decode_list_String(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs

    var len_ = sse_decode_i_32(deserializer);
    var ans_ = <String>[];
    for (var idx_ = 0; idx_ < len_; ++idx_) {
      ans_.add(sse_decode_String(deserializer));
    }
    return ans_;
  }

  @protected
  List<int> sse_decode_list_prim_u_8_loose(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    var len_ = sse_decode_i_32(deserializer);
    return deserializer.buffer.getUint8List(len_);
  }

  @protected
  Uint8List sse_decode_list_prim_u_8_strict(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    var len_ = sse_decode_i_32(deserializer);
    return deserializer.buffer.getUint8List(len_);
  }

  @protected
  NesButton sse_decode_nes_button(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    var inner = sse_decode_i_32(deserializer);
    return NesButton.values[inner];
  }

  @protected
  NesConfig sse_decode_nes_config(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    var var_filter = sse_decode_video_filter(deserializer);
    var var_region = sse_decode_nes_region(deserializer);
    var var_ramState = sse_decode_ram_state(deserializer);
    var var_fourPlayer = sse_decode_four_player(deserializer);
    var var_zapper = sse_decode_bool(deserializer);
    var var_genieCodes = sse_decode_list_String(deserializer);
    return NesConfig(
        filter: var_filter,
        region: var_region,
        ramState: var_ramState,
        fourPlayer: var_fourPlayer,
        zapper: var_zapper,
        genieCodes: var_genieCodes);
  }

  @protected
  NesRegion sse_decode_nes_region(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    var inner = sse_decode_i_32(deserializer);
    return NesRegion.values[inner];
  }

  @protected
  NesTexture?
      sse_decode_opt_box_autoadd_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedrust_asyncRwLockNesTexture(
          SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs

    if (sse_decode_bool(deserializer)) {
      return (sse_decode_box_autoadd_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedrust_asyncRwLockNesTexture(
          deserializer));
    } else {
      return null;
    }
  }

  @protected
  Player sse_decode_player(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    var inner = sse_decode_i_32(deserializer);
    return Player.values[inner];
  }

  @protected
  RamState sse_decode_ram_state(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    var inner = sse_decode_i_32(deserializer);
    return RamState.values[inner];
  }

  @protected
  int sse_decode_u_8(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return deserializer.buffer.getUint8();
  }

  @protected
  void sse_decode_unit(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
  }

  @protected
  int sse_decode_usize(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return deserializer.buffer.getUint64();
  }

  @protected
  VideoFilter sse_decode_video_filter(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    var inner = sse_decode_i_32(deserializer);
    return VideoFilter.values[inner];
  }

  @protected
  void sse_encode_AnyhowException(
      AnyhowException self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    throw UnimplementedError('Unreachable ((');
  }

  @protected
  void
      sse_encode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedrust_asyncRwLockNesEmulator(
          NesEmulator self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_usize(self.sseEncode(move: true), serializer);
  }

  @protected
  void
      sse_encode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedrust_asyncRwLockNesTexture(
          NesTexture self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_usize(self.sseEncode(move: true), serializer);
  }

  @protected
  void
      sse_encode_Auto_RefMut_RustOpaque_flutter_rust_bridgefor_generatedrust_asyncRwLockNesEmulator(
          NesEmulator self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_usize(self.sseEncode(move: false), serializer);
  }

  @protected
  void
      sse_encode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedrust_asyncRwLockNesEmulator(
          NesEmulator self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_usize(self.sseEncode(move: false), serializer);
  }

  @protected
  void
      sse_encode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedrust_asyncRwLockNesTexture(
          NesTexture self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_usize(self.sseEncode(move: false), serializer);
  }

  @protected
  void sse_encode_DartFn_Inputs_list_prim_u_8_strict_Output_unit(
      FutureOr<void> Function(Uint8List) self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_DartOpaque(
        encode_DartFn_Inputs_list_prim_u_8_strict_Output_unit(self),
        serializer);
  }

  @protected
  void sse_encode_DartOpaque(Object self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_usize(
        PlatformPointerUtil.ptrToInt(encodeDartOpaque(
            self, portManager.dartHandlerPort, generalizedFrbRustBinding)),
        serializer);
  }

  @protected
  void
      sse_encode_RustOpaque_flutter_rust_bridgefor_generatedrust_asyncRwLockNesEmulator(
          NesEmulator self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_usize(self.sseEncode(move: null), serializer);
  }

  @protected
  void
      sse_encode_RustOpaque_flutter_rust_bridgefor_generatedrust_asyncRwLockNesTexture(
          NesTexture self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_usize(self.sseEncode(move: null), serializer);
  }

  @protected
  void sse_encode_String(String self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_list_prim_u_8_strict(utf8.encoder.convert(self), serializer);
  }

  @protected
  void sse_encode_bool(bool self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    serializer.buffer.putUint8(self ? 1 : 0);
  }

  @protected
  void
      sse_encode_box_autoadd_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedrust_asyncRwLockNesTexture(
          NesTexture self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedrust_asyncRwLockNesTexture(
        self, serializer);
  }

  @protected
  void sse_encode_box_autoadd_nes_config(
      NesConfig self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_nes_config(self, serializer);
  }

  @protected
  void sse_encode_four_player(FourPlayer self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_i_32(self.index, serializer);
  }

  @protected
  void sse_encode_i_32(int self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    serializer.buffer.putInt32(self);
  }

  @protected
  void sse_encode_i_64(int self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    serializer.buffer.putInt64(self);
  }

  @protected
  void sse_encode_list_String(List<String> self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_i_32(self.length, serializer);
    for (final item in self) {
      sse_encode_String(item, serializer);
    }
  }

  @protected
  void sse_encode_list_prim_u_8_loose(
      List<int> self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_i_32(self.length, serializer);
    serializer.buffer
        .putUint8List(self is Uint8List ? self : Uint8List.fromList(self));
  }

  @protected
  void sse_encode_list_prim_u_8_strict(
      Uint8List self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_i_32(self.length, serializer);
    serializer.buffer.putUint8List(self);
  }

  @protected
  void sse_encode_nes_button(NesButton self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_i_32(self.index, serializer);
  }

  @protected
  void sse_encode_nes_config(NesConfig self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_video_filter(self.filter, serializer);
    sse_encode_nes_region(self.region, serializer);
    sse_encode_ram_state(self.ramState, serializer);
    sse_encode_four_player(self.fourPlayer, serializer);
    sse_encode_bool(self.zapper, serializer);
    sse_encode_list_String(self.genieCodes, serializer);
  }

  @protected
  void sse_encode_nes_region(NesRegion self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_i_32(self.index, serializer);
  }

  @protected
  void
      sse_encode_opt_box_autoadd_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedrust_asyncRwLockNesTexture(
          NesTexture? self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs

    sse_encode_bool(self != null, serializer);
    if (self != null) {
      sse_encode_box_autoadd_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedrust_asyncRwLockNesTexture(
          self, serializer);
    }
  }

  @protected
  void sse_encode_player(Player self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_i_32(self.index, serializer);
  }

  @protected
  void sse_encode_ram_state(RamState self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_i_32(self.index, serializer);
  }

  @protected
  void sse_encode_u_8(int self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    serializer.buffer.putUint8(self);
  }

  @protected
  void sse_encode_unit(void self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
  }

  @protected
  void sse_encode_usize(int self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    serializer.buffer.putUint64(self);
  }

  @protected
  void sse_encode_video_filter(VideoFilter self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_i_32(self.index, serializer);
  }
}
